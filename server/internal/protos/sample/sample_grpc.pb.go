// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: sample.proto

package sample

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SampleStore_GetSample_FullMethodName      = "/sample.SampleStore/GetSample"
	SampleStore_GetSampleAgain_FullMethodName = "/sample.SampleStore/GetSampleAgain"
)

// SampleStoreClient is the client API for SampleStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SampleStoreClient interface {
	GetSample(ctx context.Context, in *SampleRequest, opts ...grpc.CallOption) (*SampleResponse, error)
	GetSampleAgain(ctx context.Context, in *SampleRequest, opts ...grpc.CallOption) (*SampleResponse, error)
}

type sampleStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewSampleStoreClient(cc grpc.ClientConnInterface) SampleStoreClient {
	return &sampleStoreClient{cc}
}

func (c *sampleStoreClient) GetSample(ctx context.Context, in *SampleRequest, opts ...grpc.CallOption) (*SampleResponse, error) {
	out := new(SampleResponse)
	err := c.cc.Invoke(ctx, SampleStore_GetSample_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleStoreClient) GetSampleAgain(ctx context.Context, in *SampleRequest, opts ...grpc.CallOption) (*SampleResponse, error) {
	out := new(SampleResponse)
	err := c.cc.Invoke(ctx, SampleStore_GetSampleAgain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SampleStoreServer is the server API for SampleStore service.
// All implementations must embed UnimplementedSampleStoreServer
// for forward compatibility
type SampleStoreServer interface {
	GetSample(context.Context, *SampleRequest) (*SampleResponse, error)
	GetSampleAgain(context.Context, *SampleRequest) (*SampleResponse, error)
	mustEmbedUnimplementedSampleStoreServer()
}

// UnimplementedSampleStoreServer must be embedded to have forward compatible implementations.
type UnimplementedSampleStoreServer struct {
}

func (UnimplementedSampleStoreServer) GetSample(context.Context, *SampleRequest) (*SampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSample not implemented")
}
func (UnimplementedSampleStoreServer) GetSampleAgain(context.Context, *SampleRequest) (*SampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSampleAgain not implemented")
}
func (UnimplementedSampleStoreServer) mustEmbedUnimplementedSampleStoreServer() {}

// UnsafeSampleStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SampleStoreServer will
// result in compilation errors.
type UnsafeSampleStoreServer interface {
	mustEmbedUnimplementedSampleStoreServer()
}

func RegisterSampleStoreServer(s grpc.ServiceRegistrar, srv SampleStoreServer) {
	s.RegisterService(&SampleStore_ServiceDesc, srv)
}

func _SampleStore_GetSample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleStoreServer).GetSample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleStore_GetSample_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleStoreServer).GetSample(ctx, req.(*SampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleStore_GetSampleAgain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleStoreServer).GetSampleAgain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SampleStore_GetSampleAgain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleStoreServer).GetSampleAgain(ctx, req.(*SampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SampleStore_ServiceDesc is the grpc.ServiceDesc for SampleStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SampleStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sample.SampleStore",
	HandlerType: (*SampleStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSample",
			Handler:    _SampleStore_GetSample_Handler,
		},
		{
			MethodName: "GetSampleAgain",
			Handler:    _SampleStore_GetSampleAgain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sample.proto",
}
